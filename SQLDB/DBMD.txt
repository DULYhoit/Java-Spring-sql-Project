[1]SQL PDB 설정
첫번째 Seed PDB를 이용한 Pluggable 데이터베이스 생성
1.CDB =일종의 컨테이너 DB
2.Plugable 데이터베이스 = SQLDB 버전이 올라가면서 가상화된 DB가 등장함

과거의 배운 sql은 CDB에 접속해서 연습함

따라서 이번에 배울내용은 Plugble DB를 만들고 가상DB에 접속하는것을 배울것

PDB가 있는지확인
1.CMD -> sqlplus sys as sysdba 입력 -> 비밀번호 입력
2.select name from v$pdbs;
3.처음실행하면 NAME
	       -------------------
	       PDB$SEED ->앞으로만들어질 원본
                   XEPDB1 ->가상DB

*Plugable 데이터베이스를 만드는 구문*
CREATE
  PLUGABLE DATABASE hrpdb
  ADMIN USER DBA1
  IDENTIFIED BY password

*원격 접속을 위한 설정 변경*
저장프로시져 리스너설정이 본래 로컬만 가능하게 설정됨 따라서 그설정을 FALSE 해주는것
EXEC DBMS_XDB.SETLISTENERLOCALACCESS(FALSE);

단 HOST 컴퓨터에 방화벽 설정이 되있으면 포트포워딩을 통한 포트를 개방해야함

[2]SYS계정과 SYSTEM계정
1.SYS- SUPER 계정으로써 데이터베이스의 전체를 관리할수있음
2.SYSTEM -일반적인 방식인 데이터베이스를 관리하는계정 (관리하는데 제한사항있음)

[3]SCHEMA -스키마
1.여러가지 테이블과 인덱스 기타등등의 오브젝트 로 이루어져있는데 이를 (SCHEMA)스키마 라고 부른다.

[4]DDL,DML,DCL,TCL
1.데이터 명령어
DDL(DIFINITION)데이터 정의어
-(CREATE / ALTER / DROP)
DML(MANIFULATION) 데이터 조작어
-(INSERT / SELECT / UPDATE / DELETE) - CRUD
DCL(CONTROL) 데이터 제어어
-(GRANT / REVOKE)

2.VALUE TYPE 데이터형식

(1)Character형식
1.CHAR[(size [BYTE| CHAR])] ->CHAR(50) 이라면 들어간 데이터가 1BYTE여도 50공간만큼 만듬 비효율적일수 있게됨
2.VARCHAR2(size [BYTE | CHAR]) ->가변크기
3.NCHAR[(size)] 
4.NVARCHAR2(size)
--CHAR(3), VARCHAR2(3), NCHAR(3), NVARCHAR(3)
5.LONG -CLOB 등장으로 잘쓰이지않음
6.CLOB -대용량 텍스트 데이터타입(4Gbyte)
7.NCLOB -대용량 텍스트 유니코드 데이터타입(4Gbyte)

(2)Numeric 형식
1.NUMBER[(p [,s])]
NUMBER(4) -최대4자로 이루어진 숫자
NUMBER(6,2) -소수점 2자리를 포함하는 최대6자리 (소수점 둘째 자리에서 반올림)
NUMBER(6,-2) -소수점 -2자리에서 반올림하는 최대6자리
NUMBER -NUMBER(38,*)
NUMBER(*,5) -NUMBER(38,5)

(3)Date 형식
1.DATE - (EX:01-JAN-99)
2.TIMESTAMP -(NLS_TIMESTAMP_FORMAT) 파라미터에 명시된 값을 따름.
3.TIMESTAMP WITH TIME ZONE -(NLS_TIMESTAMP_TZ_FORMAT) 파라미터에 명시된 값을 따름.
4.TIMESTAMP WITH LOCAL TIME ZONE -(NLS_TIMESTAMP_FORMAT) 파라미터에 명시된 값을 따름.
//SELECT * FROM NLS_DATABASE_PARAMETERS 

3.데이터명령어 구문옵션
(1)DDL
-CREATE TABLE 테이블이름
- ALTER TABLE 테이블이름 (MODIFY,DROP,ADD) 컬럼
-DROP TABLE 테이블이름

(2)DML
-SELECT *(검색하고싶은 컬럼) [별칭] FROM 테이블이름
-INSERT INTO 테이블이름 VALUES(값1,값2) | INSERT INTO 테이블이름(컬럼1,컬럼2) VALUES(값1,값2)
-UPDATE 테이블이름 SET 컬럼=값 WHERE 컬럼=값; -> WHERE은 조건절 ,(SET 컬럼=값 , 컬럼=값) 다수컬럼 변경가능
-DELETE 테이블이름 컬럼=값;

[5]트랜잭션
(1)특징
1.원자성 (Atomicity) -트랜잭션이 데이터베이스에 모두 반영되던가, 아니면 전혀 반영되지 않아야 한다는 것
2.일관성 (Consistency) -트랜잭션의 작업 처리 결과가 항상 일관성이 있어야 한다는 것
3.독립성 (Isolation) -어떤 하나의 트랜잭션이라도, 다른 트랜잭션의 연산에 끼어들 수 없다는 점을 가리킨다.
4.지속성 (Durability) -트랜잭션이 성공적으로 완료됬을 경우, 결과는 영구적으로 반영되어야 한다는 점

[6]연산자
1.(산수) +,-,*,/
2.(비교) =,(!=,^=,<>),>,<,>=,<=,IS NULL, IS NOT NULL
3.(관계) NOT, AND, OR, BETWEEN, IN
4.(패턴) LIKE, %, _
5.(정규식) REGEXP_LIKE(컬럼,'정규식');
-전화번호 정규식 01[016-9]-\d{3,4}-\d{4}
- 이메일 정규식 \D\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}
-정규식 홈페이지 : https://regexlib.com/CheatSheet.aspx

[7]행 제한하기 -페이징
1.ROWNUM -SELECT 함과 동시에 ROWNUM이라는 컬럼 행이 생성됨
2. SELECT * FROM MEMBER WHERE ROWNUM BETWEEN 1 AND 5;\
3.sql실행순서 :  FROM - WHERE GROUP BY - HAVING - SELECT - ORDER BY
4. *중요* ROWNUM은 결과집합을 만들때 생성됨 (WHERE 절이 실행될때) 비교연산시 ROWNUM 컬럼을 비교하는게아니라 값만두고 비교함
따라서 ROWNUM을 두번만들어야함
5.SELECT * FROM (SELECT ROWNUM NUM, MEMBER.* FROM MEMBER) WHERE NUM BETWEEN 1 AND 5;

[8]함수
*DISTINCT 중복제거 SELECT절에 사용*
*WHERE 절에 함수를 쓸수는있지만 레코드수가 많으면 그만큼 실행되서 부담됨*

(1).문자열함수
1.SUBSTR('HELLO',1,3) -매개변수에 따라 어디서 자를건지 ,SUBSTRB('HELLO',1,3)-BYTE로 자름
2.CONCAT('홍','길동') - 두개의 문자를 합침 || <- 성능면에선 이기호가 많이쓰임
3.(L,R)TRIM('    HELLO      ') - 빈공백을 없애줌
4.LOWER('NeWLEC') - 전부 소문자로바꿈, UPPER('NeWLEC') - 전부 대문자로 바꿈
5.REPLACE('WHERE WE ARE', 'WE', 'YOU') - WE 라는 문자를 YOU로 바꿈
6.TRANSLATE('WHERE WE ARE', 'WE', 'YOU') - 두번째 인자에 해당되는 문자하나씩 3번째 인자로 바꿔줌 EX)W -> Y , E -> O
7.(L,R)PAD('HELLO',10,'0') -2번째인자의 크기만큼 값을 채울수있음
8.INITCAP('the .....') - 문장 공백 다음 첫번째 단어를 대문자로
9.INSTR('ALL WE NEED TO IS JUST TO...','TO',1,2) - TO라는 문자가 첫번째 인자값에 있는지 3번째 인자의 위치부터 찾아라 4번째인자는 몇번째있는걸 찾을건가
10.LENGTH('WHERE WE ARE') - 인자값의 길이

(2).숫자함수함수
1.ABS(35),ABS(-35) - 절대값
2.SIGN(35),SIGN(-35) - 음수양수또는0인지
3.ROUND(34.44121,2),ROUND(34.54534,2) - 반올림 2번째인자는 소숫점위치
4.TRUNC(17/5) - 몫, MOD(17,5) - 나머지
5.POWER(5,2) - 제곱, SQRT(25) - 25의 제곱근

(3).날짜함수
1.SYSDATE -오라클 DBMS위치하는 시간기준
2.CURRENT_DATE - 사용자 세션기준
3.SYSTIMESTAMP - SYSDATE 보다 세부적인
4.CURRENT_TIMESTAMP -사용자기준 세부적인날짜
-ALTER SESSION SET TIME_ZONE = '-1:0' -세션시간을 바꿀수있음
-ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS'; 글로벌날짜 포멧 변경
5.EXTRACT(YEAR FROM SYSDATE) - 날짜 추출함수 YEAR,MONTH,DAY,MINUTE,SECOND 입력가능
6.ADD_MONTHS(SYSDATE,1),ADD_MONTHS(SYSDATE,-1) - 날짜를 누적하거나 빼는함수
7.MONTHS_BETWEEN(날짜,날짜) - 날짜의 차이를 알아내는함수
8.NEXT_DAY(SYSDATE,'토요일') - 2번째 인자가 몇일인지 
9.LAST_DAY(SYSDATE) - 이번달 마지막일

(4).변환함수
1.TO_CHAR(1234567,'$99,999,999,999,99') - 숫자를 문자로
- 포맷문자 정리 : https://gent.tistory.com/331
2.TO_DATE(SYSDATE,'YYYY-MM_DD HH24:MI:SS') - 문자를 날짜로
- 포맷문자 정리 : https://gent.tistory.com/448
3.TO_NUMBER('1994') - 문자를 숫자로

(5).NULL관련함수
1.NVL(AGE, 0) - 값이 NULL일경우 2번째인자로 대채한다
2.NVL2(AGE,1,0) - AGE가 NULL이 아니면 1 , NULL이면 0
3.NULLIF(AGE,19) - AGE컬럼값이 19면 NULL로 만든다
4.DECODE(GENDER,'남성',1,'여성',2,'기타') - GENDER컬럼의 값이 '남성' 이면 1 아니면 2 둘다 해당없으면 기타

(6).집계함수함수 -*중요*
*SELECT문의 구절*
(1).SELECT - FROM - WHERE - GROUP BY - HAVING - ORDER BY
1.FROM - 격자형 데이터를 준비함
2.WHERE - 조건절 필터링 기능
3.GROUP BY - 집계로써 컬럼값을 하나로 묶는작업
-집계 함수 : SUM, MIN, MAX, COUNT, AVG
4.HAVING - 집계에 조건을 부여함, 집계에 조건을 부여하고싶으면 WHERE 절엔 조건을 못검
5.ORDER BY ASC(기본값),DESC(내림차순)- 집계된 이후에 정렬하고싶은게 있을때 사용
-순위 함수:ROW_NUM(),RANK(),DENSE_RANK() - EX SELECT ROW_NUM() OVER (PARTITION BY 그룹화할 컬럼 ORDER BY 정렬할컬럼)

(7).서브쿼리
*구절의 순서를 바꿔야 하는경우*
1.SELECT * FROM MEMBER WHERE ROWNUM BETWEEN 1 AND 5; - 최신 등록순으로 정렬한 결과에서 상위 열명을 원한다면?
2.SELECT * FROM(SELECT * FROM MEMBER ORDER BY REGDATE DESC)
WHERE ROWNUM BETWEEN 1 AND 5;

[9]JOIN
1.INNER JOIN - 두테이블간에 같은 값이 있는것들을 조회한다
2.OUTER JOIN -  INNER JOIN을 하되 조건에따라서 같은 값이 없는 컬럼까지 조회한다 ex)LEFT , RIGHT ,FULL OUTER JOIN
3.SELF JOIN - 데이터가 서로 포함 관계를 가지는경우 
4.CROSS JOIN(Cartesian Product) - 중복값을 포함한 모든 데이터를 조회함
*ANSI INNER JOIN - SELECT N.*, M.NAME WRITER_NAME FROM NOTICE N JOIN MEMBER M ON M.ID = N.WRITER_ID; 
*Oracle INNER JOIN - SELECT N.*, M.NAME WRITER_NAME FROM NOTICE N , MEMBER M WHERE M.ID = N.WRITER_ID; 

[10]UNION 유니온
*레코드만 합칠때 유니온을 사용*
1.UNION - 같은 레코드가 있을시 중복 제거하고 합침
2.MINUS - 첫번째 테이블레코드를 기준으로 중복되는 레코드를 빼고 합침
3.INTERSECT - 공통분모만 남기고 합침 MINUS 와 반대
4.UNION ALL - 공통과 상관없이 전체를 합침

[11]View 뷰
*복잡한 쿼리를 View를 통해 쉽게 볼수있게 만들어준다*
1.CREATEW VIEW 뷰이름 AS Sql문장

[12]제약조건
(1)도메인 제약조건
1.NOT NULL - 컬럼값에 NULL을 허용안함
2.DEFAULT - 값이 안들어갈때 설정할 기본값
3.CHECK - 컬럼값에 조건을 넣는 제약조건 ex)PHONE 컬럼에 '010-%-____' ,또는 정규식을 삽입할수있음

(2)엔티티 제약조건
1.PRIMARY KEY - NOT NULL 제약조건과 , 중복허용안함 을 포함한 PK 제약조건 (기본키)
2.UNIQUE - 중복허용안함 만있는 제약조건

[13]Sequence 시퀀스
*레코드가 삽입될때마다 증가되는 수를 지정한다 ex)제품번호,ID 번호 등등* 
1.CREATE SEQUENCE 시퀀스이름 START WITH 1; 





